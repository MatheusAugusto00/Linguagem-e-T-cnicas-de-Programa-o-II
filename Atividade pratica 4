import mysql.connector
def create_database():
    conexao_db = mysql.connector.connect(user='root',  # user do servidor
                            password='ceub123456',               # passwd='ceub123456'
                            host='127.0.0.1')          # host='localhost'
                            # database='')
    print('Conexão db:', conexao_db)  # Teste
    cursor_db = conexao_db.cursor()   # Cria cursor para executar comandos SQL
    sql = "CREATE DATABASE if not exists db_aquario"
    cursor_db.execute(sql)            # Executa o comando sql
    cursor_db.close()
    conexao_db.close()
    print('\nConexão db fechada.')
def create_connection():
    con = mysql.connector.connect(user='root',      # user do servidor
                            password='ceub123456',            # passwd='ceub123456'
                            host='127.0.0.1',       # host='localhost'
                            database='db_aquario')   # Nome do schema criado
    print('Conexão:', con)                          # Testando
    return con
def close_connection():  # Posso retirar esta função e colocar no final do main
    cursor.close()
    conexao.close()
    print('\nConexão fechada.')
def create_table():
    sql = """ CREATE TABLE if not exists tb_peixe(
    idt INT NOT NULL AUTO_INCREMENT,   # Cria a chava primária automatica 
    nome VARCHAR(45) NOT NULL UNIQUE,  # Valores sem repetição obrigatório
    preco DECIMAL(9,2) NOT NULL,       # NOT NULL para valor obrigatório
    dta_inserido DATE NULL,            # NULL para valor opcional
    PRIMARY KEY (idt)                  # Chave primária, not null é default
    )   """
    cursor.execute(sql)
def insert():                               # Solução 1
    a_nome = input('Insert - Nome: ')
    a_preco = float(input('Preço: '))
    a_data = input('Data: aaaa-mm-dd: ')
    sql = f""" insert into tb_peixe (nome, preco, dta_inserido) 
                      values ('{a_nome}', {a_preco}, '{a_data}')  """
    cursor.execute(sql)
    conexao.commit()                    # Confirma a alteração no database
def select():
    print('- Consulta:')
    sql = ' select * from tb_peixe '
    cursor.execute(sql)
    l_registros = cursor.fetchall()     # l_registros é uma lista de tuplas
    print(' - Tuplas:')                 # Solução 2
    for record in l_registros:  # Mostra os registros na vertical
        print(record)
def delete():
    print('- deleta:')
    x = int(input("Infore a 'idt' do peixe que será removido: "))
    sql = f"delete from tb_peixe where idt = {x}"
    cursor.execute(sql)
    conexao.commit()


if __name__ == '__main__':
    create_database()                   # Chama a função
    conexao = create_connection()       # Chama a função
    cursor = conexao.cursor()
    create_table()
    print("Digite 1 para inserir um dado na tabela.\nDigite 2 para ler os dados da tabela.\nDigite 3 para deletar um dado na tabela.\nDigite 4 para sair.")
    x=int(input("Opção: "))
    while x  != 4:
        if x == 1:
            insert()
        elif x == 2:
            select()
        elif x == 3:
            delete()
        elif x == 4:
            break
        print("Digite 1 para inserir um dado na tabela.\nDigite 2 para ler os dados da tabela.\nDigite 3 para deletar um dado na tabela.\nDigite 4 para sair.")
        x=int(input("Opção: "))

    print("Fim do programa")
    close_connection()                  # Chama a função, sempre a última chamada
